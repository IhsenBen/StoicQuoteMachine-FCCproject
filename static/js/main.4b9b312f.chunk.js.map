{"version":3,"sources":["media/stoics.png","App.js","reportWebVitals.js","index.js"],"names":["console","log","header","App","state","quotes","quote","author","index","getProverbe","length","Math","floor","random","setState","fetch","then","res","json","this","tweetURL","className","id","src","alt","Provider","value","color","size","href","target","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yr5FAAe,MAA0B,mC,OCUzCA,QAAQC,IAAIC,GACZ,IA+HeC,E,4MAzHbC,MAAQ,CACNC,OAAQ,CACN,CACEC,MACE,6EACFC,OAAQ,cAGZC,MAAO,G,EAgBTC,YAAc,WACZ,IAAQJ,EAAW,EAAKD,MAAhBC,OAER,GAAIA,EAAOK,OAAS,EAAG,CACrB,IAAMF,EAAQG,KAAKC,MAAMD,KAAKE,SAAWR,EAAOK,QAChD,EAAKI,SAAS,CACZN,Y,uDApBN,WAAqB,IAAD,OAGlBO,MAAM,iBACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,EAAKH,SACH,CACET,OAAQY,EAAIZ,QAEd,EAAKI,kB,oBAcb,WACE,MAA0BU,KAAKf,MACzBE,EADN,EAAQD,OAAR,EAAgBG,OAEVY,EAAQ,gDAA4Cd,EAAMA,MAAlD,YAA2DA,EAAMC,QAG/E,OACE,sBAAKc,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,8BACE,cAAC,IAAD,MAEF,qBAAKA,UAAU,uBAAf,SACE,sBAAKA,UAAU,eAAeC,GAAG,eAAjC,UACA,+CACD,uBACD,qBAAKD,UAAU,gBAAgBC,GAAG,SAASC,IAAKrB,EAAQsB,IAAI,KAC5D,wDAOF,qBAAKH,UAAU,oDAAf,SACE,qBAAKA,UAAU,2DAAf,SACE,sBAAKA,UAAU,oBAAoBC,GAAG,YAAtC,UACGhB,GACC,sBAAKe,UAAU,OAAf,UACE,qBAAIC,GAAG,OAAOD,UAAU,aAAxB,UACE,cAAC,IAAYI,SAAb,CACEC,MAAO,CACLC,MAAO,UACPC,KAAM,MACNP,UAAW,yBAJf,SAOE,cAAC,IAAD,MAEDf,EAAMA,MAEP,cAAC,IAAYmB,SAAb,CACEC,MAAO,CACLC,MAAO,UACPC,KAAM,MACNP,UAAW,yBAJf,SAOE,cAAC,IAAD,SAIJ,uBAAMA,UAAU,sBAAsBC,GAAG,SAAzC,UACG,IADH,KAEKhB,EAAMC,OAFX,WASJ,sBAAKc,UAAU,6CAAf,UACE,oBACEC,GAAG,cACHO,KAAMT,EACNU,OAAO,SACPT,UAAU,wBAJZ,UAME,cAAC,IAAD,IANF,cASA,yBACEC,GAAG,YACHD,UAAU,gCACVU,QAASZ,KAAKV,YAHhB,uBAKY,cAAC,IAAD,wB,GA/GVuB,IAAMC,WCJTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCKdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4b9b312f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/stoics.cca1c895.png\";","import \"./App.css\";\n\nimport ReactFCC from \"react-fcctest\";\nimport data from \"./quotes.json\";\nimport React from \"react\";\n\nimport { FaTwitter, FaQuoteLeft, FaQuoteRight } from \"react-icons/fa\";\nimport { FiRefreshCcw } from \"react-icons/fi\";\nimport { IconContext } from \"react-icons\";\nimport header from \"./media/stoics.png\";\nconsole.log(header);\nconst file = data;\n// const proverbes = data.quotes;\nconst api =\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nclass App extends React.Component {\n  state = {\n    quotes: [\n      {\n        quote:\n          \"First say to yourself what you would be;\\nand then do what you have to do.\",\n        author: \"Epictetus\",\n      },\n    ], // object avec les proverbes\n    index: 0, // index des proverbes\n  };\n  componentDidMount() {\n    // j'appelle \"l'api/fichier json que j'ai crèe\"\n    // call the json file that I made\n    fetch(\"./quotes.json\")\n      .then((res) => res.json())\n      .then((res) => {\n        this.setState(\n          {\n            quotes: res.quotes,\n          },\n          this.getProverbe\n        );\n      });\n  }\n  getProverbe = () => {\n    const { quotes } = this.state;\n    //  si le nombre d elem dans l'array est sup à 0, math random (un nombre au hassard 0 to 1) * 102 la longeur de l'array, math floor pour formater l'output--> result est l'index\n    if (quotes.length > 0) {\n      const index = Math.floor(Math.random() * quotes.length);\n      this.setState({\n        index,\n      });\n    }\n  };\n  render() {\n    const { quotes, index } = this.state;\n    const quote = quotes[index];\n    const tweetURL = `https://twitter.com/intent/tweet?text=${quote.quote}-${quote.author}`;\n\n    // console.log(index)\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div>\n            <ReactFCC />\n          </div>\n          <div className=\"container-md meander\">\n            <div className=\"container-md\" id=\"header-inner\">\n            <h1> The Stoics  </h1>\n           <br/>\n          <img className=\"img img-fluid\" id=\"stoics\" src={header} alt=\"\"/>\n          <h1>Quotes Machine</h1>\n            </div>\n         \n          </div>\n         \n        </div>\n        \n        <div className=\" d-flex align-items-center justify-content-center\">\n          <div className=\"wrapper d-flex align-items-center justify-content-center\">\n            <div className=\"col-6 rounded p-5\" id=\"quote-box\">\n              {quote && (\n                <div className=\"mb-5\">\n                  <h5 id=\"text\" className=\"text-large\">\n                    <IconContext.Provider\n                      value={{\n                        color: \"#1D3557\",\n                        size: \"3em\",\n                        className: \"global-class-name p-3\",\n                      }}\n                    >\n                      <FaQuoteLeft />\n                    </IconContext.Provider>\n                    {quote.quote}\n                 \n                    <IconContext.Provider\n                      value={{\n                        color: \"#1D3557\",\n                        size: \"3em\",\n                        className: \"global-class-name p-3\",\n                      }}\n                    >\n                      <FaQuoteRight />\n                    </IconContext.Provider>\n                  </h5>\n\n                  <cite className=\"text-center d-block\" id=\"author\">\n                    {\" \"}\n                    - {quote.author} -\n                  </cite>\n        \n                </div>\n                   \n              )}\n\n              <div className=\"d-flex justify-content-between btn-toolbar\">\n                <a\n                  id=\"tweet-quote\"\n                  href={tweetURL}\n                  target=\"_blank\"\n                  className=\" mr-3 btn btn-sm mr-3\"\n                >\n                  <FaTwitter /> twitter\n                </a>\n\n                <button\n                  id=\"new-quote\"\n                  className=\"mr-3 btn btn-sm btn-dark ml-3\"\n                  onClick={this.getProverbe}\n                >\n                  New quote <FiRefreshCcw />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n{\n  /* testing local method        */\n}\n{\n  /* {proverbes.map(post => { return (\n    <div>\n      <h1>{post.quote}</h1>\n  <p>{post.author}</p>\n    </div>\n  )}\n)} */\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}